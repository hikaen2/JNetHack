#	SCSS Id: @(#)Nethack.cnf	3.1	    93/03/26
#	Copyright (c) NetHack PC Development Team 1990, 1991, 1992, 1993
#	NetHack may be freely redistributed.  See license for details.
#	Translated & Arranged by Kouji Takada	94/07/23
#			      by Issei Numata	94/08/26
#
# '#' で始まる行はコメント行になります
#
# この設定ファイルによって、2通りの選択肢(ハードディスクか、フロッピー2枚で
# 遊ぶか)が選択出来ます。
# 
# いくつかのオプションは、このファイルで正しく設定しておく必要があります。
# 他のオプションはゲーム中に常時変更出来ます。
# どのようなオプションがあるかは、opthelp ファイルを見るといいでしょう。
#
# オプションの中でも !time, !showexp を定義しておくと、画面の書き換えが
# 幾らか速くなります(もちろん、こうすると時間と経験値は見えない)。
# 
# 一つの定義に複数の定義の例を示しておいたので、そのうちの一つを有効にして
# あとはコメントアウトしておくと良いでしょう。

#------------------------------------------------------------------------------
# *** OPTIONS ***
#
# ここでは入出力についての定義を行います。
#
# kcode は漢字コードを指定します。
# デフォルトは EUC ですが、日本語 MS-DOS で動かす場合は sjis を指定
# します。
#
# もっともベーシックな MS-DOS(PC-DOS) で動かす場合は、rawio は定義しないで
# 下さい。rawio が定義出来ると速くなるかも知れません。
#
# BIOS を定義すると、マシンの BIOS ルーチンを使って入出力を行うので速くなる
# かも知れません。また、BIOS が定義出来ると、ゲーム中のメタキーが有効に
# なります(AT=alt, 98=GRPH)。BIOS はコンパイルした時の状態によって、98 又は
# AT 専用になっています。異なるマシンで BIOS を有効にして実行すると、動作が
# おかしくなるので、その時は BIOS を定義しないで下さい。
# 
# IBMgraphics を定義すると、後途の GRAPHICS 定義で示したキャラクタを使って
# 画面を描画することが出来ます。GRAPHICS が正しくないと、画面はでたらめに
# なってしまうので気を付けて下さい。IBMgraphics を定義しないと、もっとも基本の
# ASCII キャラクタでの描画を行います。DECgraphics も同様です。
# DECgraphics を定義する時は rawio を定義しないで下さい。ハングアップします。

#OPTIONS=kcode:sjis
#OPTIONS=kcode:sjis,rawio
#OPTIONS=kcode:sjis,rawio,BIOS
#OPTIONS=kcode:sjis,rawio,IBMgraphics
OPTIONS=kcode:sjis,rawio,BIOS,IBMgraphics
#OPTIONS=kcode:sjis,DECgraphics
#OPTIONS=kcode:sjis,BIOS,DECgraphics

# ここではいつも変わらないと思われるオプションを定義します(しなくてもいい)。

OPTIONS=dogname:ぽち,catname:たま,fruit:レアチーズケーキ
#OPTIONS=name:Janet-V,female,dogname:Fido,catname:Morris,fruit:apricot
#OPTIONS=packorder:")[%?+/=!(*0_`,scores:10 top/2 around/own

# その他のオプションです。number_pad を定義すると、1〜9 のキーで四方に移動
# 出来るようになります。

OPTIONS=time,rest_on_space,noautopickup
#OPTIONS=time,rest_on_space,noautopickup,number_pad

#------------------------------------------------------------------------------
# *** HARD DISK CONFIGURATION ***
#
# ハードディスクで遊ぶ場合は、以下のように設定しなければなりません。
# HACKDIR は NetHack を展開したディレクトリを指定します。

HACKDIR=c:\games\jnethack

# LEVELS はゲーム中のレベルファイルを展開する場所を指定します。
# SAVE はゲームを途中で中断してセーブした時にデータを納める場所を指定します。
# SAVE の最後に ;n を付けると、ディスクを挿入する指示が出ないため、ハード
# ディスクでは指定しておいた方が良いでしょう。
# これらは普通、同じディレクトリにしておいて結構です。
# もし省略されると、2つとも HACKDIR のディレクトリとみなされます。

LEVELS=c:\games\jnethack\bones
SAVE=c:\games\jnethack\bones;n

# ラムディスクがあるのなら、RAMDISK で指定すると速くなります。但し、これは
# 必ず必要と言う訳ではありません。

RAMDISK=e:

#------------------------------------------------------------------------------
# *** 2-FLOPPY CONFIGURATION ***
#
# 基本的にはハードディスクの項目と変わりません。NetHack はデータも膨大になる
# ため、実行中の処理用と、セーブディスクを分ける必要があります。そこで LEVELS
# と SAVE を同じドライブにしておき、SAVE には ;n を付けないようにしておけば
# セーブする時にディスクを入れ替える指示が出ます。

#HACKDIR=a:\
#LEVELS=b:\
#SAVE=b:\
#RAMDISK=c:

#------------------------------------------------------------------------------
# *** CHARACTER GRAPHICS ***
#
# 画面を描画する時に使われるキャラクタ(69種類)をここで定義出来ます。
# 定義しない時は、NetHack が持っているデフォルトのキャラクタで表示します。
#
# キャラクタは次のようなものが定義出来ます(配列順)。
#
# 部屋の暗い部分,
# 壁: 縦方向, 横方向,
#	 部屋の4隅: 上左, 上右, 下左, 下右,
#	 十字になった壁,
#	 T字の壁: 上向き, 下向き, 左向き, 右向き,
# とびら: とびら無し,
#	 開いたとびら: 縦方向, 横方向,
#	 閉じたとびら: 縦方向, 横方向,
# 床,
# 通路: 暗い通路, 明るい通路,
# 登る階段, 降りる階段, 登る梯子, 降りる梯子,
# 罠, 蜂の巣, 祭壇, 王座, 台所, 泉, 水の溜まった場所, 氷, 溶岩,
# 降りているはね橋: 縦方向, 横方向,
# あがっているはね橋: 縦方向, 横方向,
# 空気の溜まった場所, 雲, 水,
# 4方向の光線: 縦方向, 横方向, 左上がり, 右上がり,
# 切削光線, カメラのフラッシュ, 左ブーメラン, 右ブーメラン,
# 4つの魔法の縦
# 9つの囲い: 上部 左/中/右, 中央 左/右, 下段 左/中/右,
# 9つの爆発: 上部 左/中/右, 中央 左/中/右, 下段 左/中/右
#
# デフォルトでは次のキャラクタが用いられる。
#
#	   ' '  |   -   -   -   -   -   -   -   -
#           |   |   .   -   |   +   +   .   #   #
#	    <   >   <   >   ^   "   _   \   #   {
#	    }   .   }   .   .   #   #  ' '  #   }
#	    |   -   \   /   *   !   )   (   0   #
#	    @   *   /   -   \   |   |   \   -   /
#	    /   -   \   |  ' '  |   \   -   /
#
# もし、IBMgraphics を定義したのであれば、AT のグラフィックキャラクタもしくは
# 98 のグラフィックキャラクタを使って、幾分奇麗な画面にすることが出来る。
# その場合は次のような定義を使ってみると良い。
#
# AT 機の定義例 (1)
#GRAPHICS= 032 179 196 218 191 192 217 197 193 194 \
#	   180 195 249 239 239 254 254 249 177 177 \
#	   060 062 060 062 094 157 220 190 035 244 \
#	   247 249 247 042 042 186 205 046 035 247 \
#	   179 196 092 047 042 033 041 040 048 035 \
#	   064 042 047 045 092 058 058 092 045 047 \
#	   047 045 092 058 032 058 092 045 047
#
# AT 機の定義例 (2)
#GRAPHICS= 032 186 205 201 187 200 188 206 202 203 \
#	   185 204 249 239 239 254 254 249 177 177 \
#	   060 062 060 062 094 034 095 092 035 244 \
#	   247 249 247 042 042 179 196 046 035 247 \
#	   179 196 092 047 042 033 041 040 048 035 \
#	   064 042 047 045 092 058 058 092 045 047 \
#	   047 045 092 058 032 058 092 045 047
#
# 98 機の定義例
GRAPHICS = 032 150 149 156 157 158 159 143 144 145 \
           146 147 046 045 124 124 045 046 035 035 \
           060 062 060 062 094 034 095 092 035 236 \
           135 234 125 150 224 240 240 237 131 126 \
           150 149 239 238 042 033 157 158 048 035 \
           064 042 238 149 239 150 150 239 149 238 \
           238 149 239 150 032 150 239 149 238
#
# DECgraphics の場合も同様である。DEC Rainbow か、ANSI の線引きシーケンス
# がサポートされている必要がある。
#
#GRAPHICS= 032 248 241 236 235 237 234 238 246 247 \
#	   245 244 248 241 092 047 254 241 248 043 \
#	   254 225
#
#------------------------------------------------------------------------------
# *** END OF CONFIGURATION ***

